IngestGranuleCatchDuplicateErrorTest:
  Comment: 'Ingest Granule Catch Duplicate Error'
  StartAt: Report
  States:
    Report:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      Next: SyncGranuleNoVpc
    SyncGranuleNoVpc:
      CumulusConfig:
        buckets: '{$.meta.buckets}'
        provider: '{$.meta.provider}'
        collection: '{$.meta.collection}'
        stack: '{$.meta.stack}'
        downloadBucket: '{$.cumulus_meta.system_bucket}'
        duplicateHandling: '{$.meta.collection.duplicateHandling}'
        pdr: '{$.meta.pdr}'
        cumulus_message:
          outputs:
            - source: '{$.granules}'
              destination: '{$.meta.input_granules}'
            - source: '{$}'
              destination: '{$.payload}'
            - source: '{$.process}'
              destination: '{$.cumulus_meta.process}'
      Type: Task
      Resource: ${SyncGranuleNoVpcLambdaFunction.Arn}
      Retry:
          - ErrorEquals:
              - States.ALL
            IntervalSeconds: 2
            MaxAttempts: 3
      Catch:
        - ErrorEquals:
          - 'DuplicateFile'
          ResultPath: '$.meta.syncGranCaughtError'
          Next: WorkflowSucceeded
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: ChooseProcess
    ChooseProcess:
      Type: Choice
      Choices:
        - Variable: $.cumulus_meta.process
          StringEquals: modis
          Next: ProcessingStep
      Default: StopStatus
    ProcessingStep:
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        collection: '{$.meta.collection}'
      Type: Task
      Resource: ${FakeProcessingLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Retry:
        - ErrorEquals:
            - States.ALL
          IntervalSeconds: 2
          MaxAttempts: 3
      Next: MoveGranuleStep
    MoveGranuleStep:
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        buckets: '{$.meta.buckets}'
        granuleIdExtraction: '{$.meta.collection.granuleIdExtraction}'
        distribution_endpoint: '{$.meta.distribution_endpoint}'
        input_granules: '{$.meta.input_granules}'
        collection: '{$.meta.collection}'
        duplicateHandling: '{$.meta.collection.duplicateHandling}'
      Type: Task
      Resource: ${MoveGranulesLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - 'DuplicateFile'
          ResultPath: '$.meta.moveGranCaughtError'
          Next: WorkflowSucceeded
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        sfnEnd: true
        stack: '{$.meta.stack}'
        bucket: '{$.meta.buckets.internal.name}'
        stateMachine: '{$.cumulus_meta.state_machine}'
        executionName: '{$.cumulus_meta.execution_name}'
        cumulus_message:
          input: '{$}'
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'
    WorkflowSucceeded:
      Type: Succeed
